# –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏ —Ñ–ª–∞–≥–∏
CXX := g++
CXXFLAGS := -std=c++20 -Iinclude -Wno-unused-parameter
LDFLAGS := -lsfml-graphics -lsfml-window -lsfml-system

# –§–ª–∞–≥–∏ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
COVERAGE_FLAGS := -fprofile-arcs -ftest-coverage -g
COVERAGE_LDFLAGS := -fprofile-arcs -ftest-coverage

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SRC_DIR := lib
TEST_DIR := Unit
BUILD_DIR := build
BIN_DIR := bin
TESTS_BIN_DIR := $(BIN_DIR)/tests
COVERAGE_DIR := coverage_report
VSCODE_COV_DIR := ~/Volgatech/OOD/.vscode/coverage

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
SRCS := $(shell find $(SRC_DIR) -name "*.cpp")
MAIN_SRCS := main.cpp
SRCS += $(MAIN_SRCS)

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
TEST_SRCS := \
	$(TEST_DIR)/NotifyObserversTest.cpp

# –û–±—ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
MAIN_OBJS := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(MAIN_SRCS))

# –û–±—ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
LIB_OBJS := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(SRCS))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π
TEST_TARGETS := $(patsubst $(TEST_DIR)/%.cpp,$(TESTS_BIN_DIR)/%_test,$(TEST_SRCS))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å
all: $(BIN_DIR)/main

# ============================================================================
# –¶–ï–õ–ò –î–õ–Ø VSCODE COVERAGE GUTTERS
# ============================================================================

# –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –¥–ª—è VSCode - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç LCOV —Ñ–∞–π–ª –¥–ª—è Coverage Gutters
vscode-coverage: CXXFLAGS += $(COVERAGE_FLAGS)
vscode-coverage: LDFLAGS += $(COVERAGE_LDFLAGS)
vscode-coverage: $(VSCODE_COV_DIR) test-coverage-run generate-lcov
	@echo ""
	@echo "‚úÖ Coverage data generated for VSCode"
	@echo "üìä LCOV file: $(VSCODE_COV_DIR)/coverage.lcov"
	@echo "üìà HTML report: $(VSCODE_COV_DIR)/index.html"
	@echo ""
	@echo "üéØ Now in VSCode:"
	@echo "   1. Install 'Coverage Gutters' extension"
	@echo "   2. Ctrl+Shift+P ‚Üí 'Coverage Gutters: Watch'"
	@echo "   3. Select '$(VSCODE_COV_DIR)/coverage.lcov'"
	@echo "   4. Ctrl+Shift+P ‚Üí 'Coverage Gutters: Display Coverage'"
	@echo "   5. Open any source file to see coverage highlighting"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
test-coverage-run: $(TEST_TARGETS)
	@echo "üß™ Running tests with coverage instrumentation..."
	@for test in $^; do \
		echo "Running $$test..."; \
		$$test && echo "‚úÖ $$test PASSED" || echo "‚ùå $$test FAILED"; \
		echo; \
	done

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LCOV –∏ HTML –æ—Ç—á–µ—Ç–æ–≤
generate-lcov: $(VSCODE_COV_DIR)
	@echo "üìä Generating coverage reports..."
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--exclude=".*test.*" \
		--exclude=".*/tests?/.*" \
		--lcov -o $(VSCODE_COV_DIR)/coverage.lcov
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--exclude=".*test.*" \
		--exclude=".*/tests?/.*" \
		--html --html-details -o $(VSCODE_COV_DIR)/index.html
	@echo "üìà Generated HTML report: $(VSCODE_COV_DIR)/index.html"

# –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—Ä—ã—Ç–∏—è –≤ VSCode (—Ç–æ–ª—å–∫–æ LCOV)
vscode-quick: CXXFLAGS += $(COVERAGE_FLAGS)
vscode-quick: LDFLAGS += $(COVERAGE_LDFLAGS)
vscode-quick: $(VSCODE_COV_DIR) test-coverage-run
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--lcov -o $(VSCODE_COV_DIR)/coverage.lcov
	@echo "‚úÖ Quick LCOV generated for VSCode: $(VSCODE_COV_DIR)/coverage.lcov"

# ============================================================================
# –û–ë–©–ò–ï –¶–ï–õ–ò –ü–û–ö–†–´–¢–ò–Ø
# ============================================================================

# –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
coverage: CXXFLAGS += $(COVERAGE_FLAGS)
coverage: LDFLAGS += $(COVERAGE_LDFLAGS)
coverage: test-coverage-run
	@echo "üìä Generating detailed coverage report..."
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--exclude=".*test.*" \
		--html --html-details -o $(COVERAGE_DIR)/index.html
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--print-summary
	@echo "üìÅ Full report: $(COVERAGE_DIR)/index.html"

# –ü–æ–∫—Ä—ã—Ç–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–µ—Ç–≤–µ–π
coverage-branches: CXXFLAGS += $(COVERAGE_FLAGS)
coverage-branches: LDFLAGS += $(COVERAGE_LDFLAGS)
coverage-branches: test-coverage-run
	@echo "üåø Generating branch coverage report..."
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--branches \
		--html --html-details -o $(COVERAGE_DIR)/branches.html
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--branches --print-summary
	@echo "üìÅ Branch report: $(COVERAGE_DIR)/branches.html"

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
coverage-console: CXXFLAGS += $(COVERAGE_FLAGS)
coverage-console: LDFLAGS += $(COVERAGE_LDFLAGS)
coverage-console: test-coverage-run
	@echo "=== üìä CODE COVERAGE SUMMARY ==="
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--print-summary
	@echo ""
	@echo "=== üåø BRANCH COVERAGE ==="
	@gcovr -r . \
		--exclude="$(TEST_DIR)/.*" \
		--exclude=".*catch.*" \
		--branches --print-summary

# ============================================================================
# –°–ë–û–†–ö–ê –ü–†–û–ì–†–ê–ú–ú –ò –¢–ï–°–¢–û–í
# ============================================================================

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
$(BIN_DIR)/main: $(MAIN_OBJS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)

# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–±–æ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤
$(TESTS_BIN_DIR)/%_test: $(BUILD_DIR)/$(TEST_DIR)/%.o $(filter-out $(BUILD_DIR)/main.o, $(LIB_OBJS)) | $(TESTS_BIN_DIR)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)

# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
$(BUILD_DIR)/$(TEST_DIR)/%.o: $(TEST_DIR)/%.cpp | $(BUILD_DIR)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –¶–ï–õ–ò
# ============================================================================

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
$(BUILD_DIR) $(BIN_DIR) $(TESTS_BIN_DIR) $(COVERAGE_DIR) $(VSCODE_COV_DIR):
	mkdir -p $@

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
test: $(TEST_TARGETS)
	@echo "üß™ Running tests..."
	@for test in $^; do \
		echo "Running $$test..."; \
		$$test && echo "‚úÖ $$test PASSED" || echo "‚ùå $$test FAILED"; \
		echo; \
	done

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
coverage-info:
	@echo "=== üìÅ SOURCE FILES FOR COVERAGE ANALYSIS ==="
	@for file in $(SRCS); do \
		echo "$$file"; \
	done
	@echo ""
	@echo "=== üß™ TEST FILES (EXCLUDED) ==="
	@for file in $(TEST_SRCS); do \
		echo "$$file"; \
	done

# –û—á–∏—Å—Ç–∫–∞
clean:
	rm -rf ./$(BUILD_DIR) ./$(BIN_DIR) ./$(COVERAGE_DIR) ./$(VSCODE_COV_DIR)
	find . -name "*.gcda" -delete
	find . -name "*.gcno" -delete
	find . -name "*.gcov" -delete
	find . -name "*.lcov" -delete

# –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–∫—Ä—ã—Ç–∏—è
clean-coverage:
	rm -rf ./$(COVERAGE_DIR) ./$(VSCODE_COV_DIR)
	find . -name "*.gcda" -delete
	find . -name "*.gcno" -delete
	find . -name "*.gcov" -delete
	find . -name "*.lcov" -delete

# –ü–æ–º–æ—â—å
help:
	@echo "=== üéØ AVAILABLE TARGETS ==="
	@echo "üì¶ all              - Build main program"
	@echo "üß™ test             - Run tests without coverage"
	@echo ""
	@echo "=== üî¨ COVERAGE TARGETS ==="
	@echo "üíö vscode-coverage  - Generate LCOV for VSCode Coverage Gutters (RECOMMENDED)"
	@echo "üí® vscode-quick     - Quick LCOV generation for VSCode"
	@echo "üìä coverage         - Full HTML coverage report"
	@echo "üåø coverage-branches - Coverage with branch analysis"
	@echo "üìü coverage-console  - Console-only coverage summary"
	@echo ""
	@echo "=== üßπ CLEANING ==="
	@echo "üßπ clean            - Clean everything"
	@echo "üßΩ clean-coverage   - Clean only coverage data"
	@echo ""
	@echo "=== ‚ÑπÔ∏è  INFO ==="
	@echo "üìã coverage-info    - Show which files are analyzed"
	@echo "‚ùì help             - Show this help"

.PHONY: all test test-coverage-run generate-lcov coverage coverage-branches \
        coverage-console vscode-coverage vscode-quick clean clean-coverage \
        help coverage-info

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø–æ–º–æ—â–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
.DEFAULT_GOAL := help